name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    env:
      MONGODB_AUTH_URI: mongodb://localhost:27017/auth
      MONGODB_PRODUCT_URI: mongodb://localhost:27017/products
      MONGODB_ORDER_URI: mongodb://localhost:27017/orders
      RABBITMQ_URI: amqp://localhost:5672
      JWT_SECRET: caominhtrung

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install root dependencies
        working-directory: ./
        run: |
          npm ci || npm install

      - name: Install auth service dependencies
        working-directory: ./auth
        run: npm ci || npm install

      - name: Install product service dependencies
        working-directory: ./product
        run: npm ci || npm install

      - name: Start docker-compose services
        run: docker compose up -d --build

      - name: Wait for services to be ready
        run: npx wait-on tcp:27017 tcp:5672 tcp:3000 tcp:3001 --timeout 180000

      - name: Run root tests
        working-directory: ./
        run: npm test

      - name: Run auth tests
        working-directory: ./auth
        run: npm test || echo "No tests for auth or tests failed"

      - name: Run product tests
        working-directory: ./product
        run: npm test || echo "No tests for product or tests failed"

      - name: Show test result files (debug)
        if: always()
        run: |
          echo "Listing root test-results"
          ls -la ./test-results || true
          echo "Listing auth test-results"
          ls -la ./auth/test-results || true
          echo "Listing product test-results"
          ls -la ./product/test-results || true
          echo "Searching for junit.xml files"
          find . -type f -name 'junit.xml' -print || true

      - name: Upload test results (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            **/test-results/**
            **/junit.xml

      - name: Tear down docker-compose services
        if: always()
        run: docker compose down

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR (only on push)
        if: ${{ github.event_name == 'push' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build product Docker image
        working-directory: ./product
        run: |
          docker build -t product:latest .

      - name: Build auth Docker image
        working-directory: ./auth
        run: |
          docker build -t auth:latest .

      - name: Build order Docker image
        working-directory: ./order
        run: |
          docker build -t order:latest .

      - name: Build api-gateway Docker image
        working-directory: ./api-gateway
        run: |
          docker build -t api-gateway:latest .

      - name: Push images to GHCR
        if: ${{ github.event_name == 'push' }}
        run: |
          IMAGE_NAMESPACE=${{ github.repository_owner }}
          docker tag product:latest ghcr.io/${IMAGE_NAMESPACE}/product:latest
          docker tag auth:latest ghcr.io/${IMAGE_NAMESPACE}/auth:latest
          docker tag order:latest ghcr.io/${IMAGE_NAMESPACE}/order:latest
          docker tag api-gateway:latest ghcr.io/${IMAGE_NAMESPACE}/api-gateway:latest
          docker push ghcr.io/${IMAGE_NAMESPACE}/product:latest
          docker push ghcr.io/${IMAGE_NAMESPACE}/auth:latest
          docker push ghcr.io/${IMAGE_NAMESPACE}/order:latest
          docker push ghcr.io/${IMAGE_NAMESPACE}/api-gateway:latest
